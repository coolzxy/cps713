#ifndef HTPA_H
#define HTPA_H

#include <stdio.h>
#include <limits.h>

// file buffer in bytes
#define CHUNK 1024

// In bits
#define BLOCK_LEN 128
#define KEY_LEN 72
#define ROUND_KEY_LEN 64
#define BLOCK_HALF_LEN ((int) BLOCK_LEN / 2)

#define BLOCK_BYTE_LEN ((int) BLOCK_LEN / CHAR_BIT)
#define KEY_BYTE_LEN ((int) KEY_LEN / CHAR_BIT)
#define ROUND_BYTE_KEY_LEN ((int) ROUND_KEY_LEN / CHAR_BIT)
#define BLOCK_BYTE_HALF_LEN ((int) BLOCK_HALF_LEN / CHAR_BIT)


#ifndef DEBUG_LEVEL
#define DEBUG_LEVEL 1
#endif

// const unsigned char sbox[256] = {
// /*  Pos.    0x00  0x01  0x02  0x03  0x04  0x05  0x06  0x07  0x08  0x09  0x0A  0x0B  0x0C  0x0D  0x0E  0x0F */
// /* 0x00 */  0x64, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
// /* 0x10 */  0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x20 */  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x30 */  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x40 */  0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x50 */  0x53, 0xD1, 0x00, 0xED, 0x20, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x60 */  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x70 */  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x80 */  0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0x90 */  0x60, 0x81, 0x4F, 0xDC, 0x22, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0xA0 */  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0xB0 */  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0xC0 */  0xBA, 0x78, 0x25, 0x2E, 0x1C, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0xD0 */  0x70, 0x3E, 0xB5, 0x66, 0x48, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0xE0 */  0xE1, 0xF8, 0x98, 0x11, 0x69, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x,
// /* 0xF0 */  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x, 0x
// };

typedef struct htpa_bytes_tag {
  int len;
  unsigned char *bytes;
} htpa_bytes;

typedef struct htpa_block_array_tag {
  int size;
  htpa_bytes **blocks;
} htpa_blocks_array;


void printf_blocks_array(htpa_blocks_array * array_ptr);
void fprint_bytes_hex(FILE *stream, htpa_bytes *);
void fprint_bytes_str(FILE *stream, htpa_bytes *);
char * get_bytes_hex(htpa_bytes *); // string of bytes represented hex, takes pointer to htpa_bytes struct
char * get_bytes_str(htpa_bytes *); // string of bytes represented ASCII, takes pointer to htpa_bytes struct

int calc_bits(htpa_bytes *); // Returns number of bits of byte array
int calc_blocks_for_bytes(htpa_bytes *); // Returns number of blocks needed in a byte array

htpa_blocks_array * split_into_blocks(htpa_bytes *); // breaks a byte array of any size into blocks (array of htpa_bytes)
void pad_bytes(htpa_bytes *); // reallocates space of byte stream to fit modulo BLOCK_BYTE_LEN
void free_blocks_array(htpa_blocks_array *); // Frees up memory of the blocks' byte arrays, the blocks themselves, and their array


#define debug_print(level, fmt, ...) \
        do { if (DEBUG && level <= DEBUG_LEVEL) fprintf(stderr, "%s:%d:%s(): [DEBUG %i] " fmt, __FILE__, \
                                __LINE__, __func__, level, __VA_ARGS__); fflush(stderr); } while (0)


#endif /* HTPA_H */
